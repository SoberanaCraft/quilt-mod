import java.util.stream.Stream

import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.8.0"
    alias libs.plugins.kotlin
    alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name

var javaVersion = 17
var ktorVersion = "2.2.3"

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

configurations {
    shared
}


var blacklist = ["org.slf4j", "org.jetbrains.kotlin", "org.jetbrains"]
// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
    minecraft libs.minecraft
    mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

    // Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
    /*
    mappings(
        loom.layered {
            mappings(variantOf(libs.quilt.mappings) { classifier("intermediary-v2") })
            officialMojangMappings()
        }
    )
    */

    modImplementation libs.quilt.loader

    // QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
    // Quilted Fabric API will automatically pull in the correct QSL version.
    modImplementation libs.qfapi
    // modImplementation(libs.bundles.qfapi) // If you wish to use the deprecated Fabric API modules

    //modImplementation(libs.qkl)
    modImplementation 'net.silkmc:silk-core:1.9.6'
    modImplementation 'net.silkmc:silk-commands:1.9.6'

    var deps = [
            "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0",
            "io.ktor:ktor-client-core:$ktorVersion",
            "io.ktor:ktor-client-cio:$ktorVersion",
            "io.ktor:ktor-client-content-negotiation:$ktorVersion",
            "io.ktor:ktor-client-websockets:$ktorVersion",
            "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion",
            "org.jetbrains.kotlinx:kotlinx-datetime:0.4.0"
    ]

    deps.forEach {
        shared implementation(it)
    }

    recurse("shared")
        .filter({ (!blacklist.contains(it.group)) })
        .forEach {
            var dep = s(it)
            include dep
        }

}

Stream<ModuleVersionIdentifier> recurseAll(ArrayList<String> configurations) {
    configurations.stream().map { recurse(it) }.flatMap {it}.distinct()
}

Stream<ModuleVersionIdentifier> recurse(String configuration) {
    var deps = []
    var conf = configurations.getByName(configuration)
    conf.getResolvedConfiguration().getResolvedArtifacts().each {
        at ->
            var id = at.moduleVersion.id
            deps.add(id)
    }
    return deps.stream().distinct()
}

kotlin {
    var ktVer = libs.plugins.kotlin.get().version.requiredVersion
    version(ktVer[0..(ktVer.lastIndexOf('.') - 1)].trim())
}

compileKotlin {
    kotlinOptions {
        jvmTarget = javaVersion
    }
}

compileJava {
    options.encoding = "UTF-8"
}

tasks {
    processResources {
        filteringCharset = "UTF-8"
        inputs.property 'version', version

        filesMatching('quilt.mod.json') {
            expand "version": version
        }
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    // Run `./gradlew wrapper --gradle-version <newVersion>` or `gradle wrapper --gradle-version <newVersion>` to update gradle scripts
    // BIN distribution should be sufficient for the majority of mods
    wrapper {
        distributionType = Wrapper.DistributionType.BIN
    }

    jar {
        from("LICENSE") {
            rename { "LICENSE_${archives_base_name}" }
        }
    }
}

var targetJavaVersion = JavaVersion.toVersion(javaVersion)
if (JavaVersion.current() < targetJavaVersion) {
    kotlin.jvmToolchain(javaVersion)

    java.toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion))
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
    // Uncomment this line to generate them.
    // withJavadocJar()

    // Still required by IDEs such as Eclipse and VSC
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

static String s(ResolvedDependency it) {
    return it.getModuleGroup() + ":" + it.getModuleName() + ":" + it.getModuleVersion()
}

static String s(ModuleVersionIdentifier it) {
    return it.group + ":" + it.name + ":" + it.version
}
